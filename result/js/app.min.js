/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nwindow.onload = function() {\r\n\r\n    const showOrRemoveButton = document.querySelectorAll('.show-or-remove-form'),\r\n        addPostForm = document.querySelector('.add-post__form'),\r\n        addPostFormOverlay = document.querySelector('.add-post__overlay'),\r\n        addPostButton = document.querySelector('.add-post'),\r\n        containerPost = document.querySelector('.post__wrapper'),\r\n        deleteAllButton = document.querySelector('.delete-all');\r\n    for (let i = 0; i < showOrRemoveButton.length; i++) { //Кнопок несколько(2), поэтому вешаем событие на каждую\r\n        showOrRemoveButton[i].addEventListener('click', showOrRemoveForm);\r\n    }\r\n\r\n    function showOrRemoveForm() { //Отображение\\сокрытие формы добавления поста\r\n        addPostForm.classList.toggle('d-none');\r\n        addPostFormOverlay.classList.toggle('d-none');\r\n    }\r\n\r\n    addPostButton.addEventListener('click', addPost)\r\n    if (localStorage.getItem('countPost') === null) { // проверка на наличие постов, если нет ключа количества, то он устанавливается\r\n        localStorage.setItem('countPost', 0); // используется для идентификаторов постов\r\n    }\r\n    if (localStorage.getItem('countPost') !== null) { //Если какие-то посты уже есть в хранилище, их надо отрисовать на странице\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            let key = localStorage.key(i);\r\n            if (localStorage.key(i) !== 'countPost') { //Исключаем ключ с количеством постов\r\n                let currentPost = JSON.parse(localStorage.getItem(key)); //Преобразование строки JSON в объект \r\n                containerPost.insertAdjacentHTML('beforeend', `\r\n                    <div class=\"post\" data-postId=\"${currentPost.id}\">\r\n                        <div class=\"post__title\">${currentPost.title}</div>\r\n                        <div class=\"post__time\">Время создания: <span>${currentPost.time}</span></div>\r\n                        <div class=\"post__time redact\">Время редактирования:  <span>${currentPost.redactTime}</span></div>\r\n                        <button class=\"redact-post button\">Отредактировать пост</button>\r\n                        <button class=\"show-window-post button\">Отобразить пост</button>\r\n                    </div>`);\r\n            }\r\n        }\r\n    }\r\n    deleteAllButton.addEventListener('click', () => {\r\n        localStorage.clear();\r\n        containerPost.innerHTML = '';\r\n    });\r\n\r\n    function addPost() {\r\n        localStorage.countPost = Number(localStorage.countPost) + 1; //Изменение количества постов \r\n        let postName = \"post\" + localStorage.countPost; //Создание уникального ключа для каждого поста \r\n        let titlePost = document.querySelector('input[name=\"title\"]').value;\r\n        let textPost = document.querySelector('textarea[name=\"main-text\"]').value;\r\n        let timePost = new Date().toLocaleTimeString() + \"  \" + new Date().toLocaleDateString();\r\n        let timeRadactPost = ''; //Изначально дата редактирования пустая\r\n        localStorage.setItem(postName, JSON.stringify({ id: localStorage.countPost, title: titlePost, text: textPost, time: timePost, redactTime: timeRadactPost }));\r\n        let currentPost = JSON.parse(localStorage[postName]); //Получение данных текущего поста\r\n        containerPost.insertAdjacentHTML('beforeend', `\r\n                    <div class=\"post\" data-postId=\"${currentPost.id}\">\r\n                        <div class=\"post__title\">${currentPost.title}</div>\r\n                        <div class=\"post__time\">Время создания: <span>${currentPost.time}</span></div>\r\n                        <div class=\"post__time redact\">Время редактирования:  <span>${currentPost.redactTime}</span></div>\r\n                        <button class=\"redact-post button\">Отредактировать пост</button>\r\n                        <button class=\"show-window-post button\">Отобразить пост</button>\r\n                    </div>\r\n        `); //Отрисовка только созданного поста\r\n        addPostFormOverlay.classList.add('d-none');\r\n        addPostForm.classList.add('d-none');\r\n    }\r\n\r\n    containerPost.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('redact-post')) { //Делегирование событий. Необходимо, так как изначально кнопки \"редактировать\" не существует\r\n            let postName = \"post\" + e.target.parentNode.dataset.postid; //Получение конкретного поста, который будет редактироваться\r\n            let currentPost = JSON.parse(localStorage[postName]);\r\n            containerPost.insertAdjacentHTML('beforeend', `\r\n            <div class=\"add-post__overlay redact\">\r\n            </div>\r\n            <form class=\"add-post__form redact\" action=\"\" method=\"post\">\r\n                        <input class=\"form__input\" value=\"${currentPost.title}\" name=\"redact-title\" type=\"text\" placeholder=\"Введите новый заголовок поста\" >\r\n                        <textarea class=\"form__textarea\" name=\"redact-main-text\" type=\"text\" placeholder=\"Введите новый основной текст поста\">${currentPost.text}</textarea>\r\n                        <button class=\"button redact-post-button\" type=\"button\">Отредактировать пост</button>\r\n                        <button class=\"button remove-redact-form\" type=\"button\">Отмена</button>\r\n            </form>`);\r\n            let removeButton = document.querySelector('.remove-redact-form'),\r\n                redactForm = document.querySelector('.add-post__form.redact'),\r\n                redactFormOverlay = document.querySelector('.add-post__overlay.redact'),\r\n                redactButton = document.querySelector('.redact-post-button');\r\n            removeButton.addEventListener('click', () => {\r\n                containerPost.removeChild(redactForm);\r\n                containerPost.removeChild(redactFormOverlay);\r\n            });\r\n            redactButton.addEventListener('click', () => {\r\n                currentPost.title = document.querySelector('input[name=\"redact-title\"]').value;\r\n                currentPost.text = document.querySelector('textarea[name=\"redact-main-text\"]').value;\r\n                currentPost.redactTime = new Date().toLocaleTimeString() + \"  \" + new Date().toLocaleDateString();; //Добавление времени регистрации\r\n                localStorage[postName] = JSON.stringify(currentPost); //Обновление данных поста внутри хранилища\r\n                e.target.parentNode.innerHTML = `\r\n                <div class=\"post__title\">${currentPost.title}</div>\r\n                <div class=\"post__time\">Время создания: <span>${currentPost.time}</span></div>\r\n                <div class=\"post__time redact\">Время редактирования: <span>${currentPost.redactTime}</span></div>\r\n                <button class=\"redact-post button\">Отредактировать пост</button>\r\n                <button class=\"show-window-post button\">Отобразить пост</button>`; //Обновление поста в соответсвии с новыми данными на странице\r\n                containerPost.removeChild(redactForm); //После успешного редактирования, форма убирается\r\n                containerPost.removeChild(redactFormOverlay);\r\n            });\r\n        }\r\n        if (e.target.classList.contains('show-window-post')) { //Делегирование событий. Необходимо, так как изначально постов не существует\r\n            let postid = e.target.parentNode.dataset.postid;\r\n            let postName = 'post' + postid;\r\n            let currentPost = JSON.parse(localStorage[postName]);\r\n            containerPost.insertAdjacentHTML('beforeend', `\r\n            <div class=\"add-post__overlay window-post__overlay\"></div>\r\n            <div class=\"post__window\">\r\n                <h1 class=\"post__title\">${currentPost.title}</h1>\r\n                <p class=\"post__main-text\">${currentPost.text}</p>\r\n                <div class=\"post__time\">Время создания: <span>${currentPost.time}</span></div>\r\n                <div class=\"post__time redact\">Время редактирования: <span>${currentPost.time}</span></div>\r\n                <button class=\"remove-post-window button\">Закрыть окно</button>\r\n            </div>\r\n            `);\r\n            document.querySelector('.remove-post-window').addEventListener('click', () => {\r\n                containerPost.removeChild(document.querySelector('.window-post__overlay'));\r\n                containerPost.removeChild(document.querySelector('.post__window'))\r\n            })\r\n        }\r\n    });\r\n\r\n}\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;